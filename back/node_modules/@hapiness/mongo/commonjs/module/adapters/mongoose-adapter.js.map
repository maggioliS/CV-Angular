{"version":3,"file":"mongoose-adapter.js","sourceRoot":"","sources":["../../../../src/module/adapters/mongoose-adapter.ts"],"names":[],"mappings":"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","sourcesContent":["import * as mongoose from 'mongoose';\nimport { Connection, Mongoose } from 'mongoose';\n\nimport { Observable } from 'rxjs/Observable';\nimport { HapinessMongoAdapter } from './hapiness-mongo-adapter';\nimport { Debugger, UtilFunctions } from '../shared';\n\nconst __debugger = new Debugger('MongooseAdapter');\n\n(<any>mongoose).Promise = global.Promise;\n\nexport class MongooseAdapter extends HapinessMongoAdapter {\n\n    public static getInterfaceName(): string {\n        return 'mongoose';\n    }\n\n    constructor(options) {\n        super(options);\n\n        this.on('error', (...args) => __debugger.debug('on#error', JSON.stringify(args)));\n    }\n\n    protected _tryConnect(): Observable<void> {\n        return Observable\n            .create(observer => {\n                this._isReady = false;\n\n                const connectOptions: mongoose.ConnectionOptions = {\n                    promiseLibrary: global.Promise,\n                    reconnectTries: Number.MAX_VALUE,\n                    reconnectInterval: 5000,\n                };\n\n                this._connection = mongoose.createConnection(this._uri, connectOptions);\n\n                this._connection.on('connected', () => {\n                    __debugger.debug('on#connected', `connected to ${UtilFunctions.hideCredentials(this._uri)}`);\n                    this.emit('connected', { uri: this._uri });\n                });\n\n                this._connection.on('reconnectFailed', () => {\n                    __debugger.debug('on#reconnectFailed', `reconnectFailed on ${UtilFunctions.hideCredentials(this._uri)}`);\n                    this.emit('reconnectFailed', { uri: this._uri });\n                });\n\n                // Seems that typings are not up to date at the moment\n                this._connection['then'](() => {\n                    observer.next();\n                    observer.complete();\n                })\n                .catch(err => observer.error(err));\n            });\n    }\n\n    protected _afterConnect(): Observable<void> {\n        return Observable\n            .create(observer => {\n                this.onConnected().subscribe(_ => {\n                    __debugger.debug('_afterConnect', '(subscribe) On connected success');\n                }, (e) => {\n                    __debugger.debug('_afterConnect', `(subscribe) On connected failed ${JSON.stringify(e, null, 2)}`);\n                    this.emit('error', e);\n                });\n\n                this._connection.on('error', (...args) => this.emit('error', ...args));\n                this._connection.on('disconnected', () => {\n                    __debugger.debug('on#disconnected', `disconnected from ${UtilFunctions.hideCredentials(this._uri)}`);\n                    this.emit('disconnected', { uri: this._uri });\n                });\n\n                observer.next();\n                observer.complete();\n            });\n    }\n\n    public getLibrary<T = Mongoose>(): T {\n        return <any>mongoose;\n    }\n\n    public getConnection<T = Connection>(): T {\n        return this._connection;\n    }\n\n    public registerValue(schema: any, collection: string, collectionName?: string) {\n        if (collectionName && collectionName.length) {\n            return this._connection.model(collection, schema, collectionName);\n        }\n\n        return this._connection.model(collection, schema);\n    }\n\n    public close(): Observable<void> {\n        return Observable.fromPromise(this._connection.client.close());\n    }\n}\n"]}