{"version":3,"file":"mongoose-gridfs-bucket-adapter.js","sourceRoot":"","sources":["../../../../src/module/adapters/mongoose-gridfs-bucket-adapter.ts"],"names":[],"mappings":";;AAAA,qCAAqC;AAGrC,yDAAqD;AAE/C,QAAS,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;AAEzC,iCAAyC,SAAQ,kCAAe;IAGrD,MAAM,CAAC,gBAAgB;QAC1B,OAAO,wBAAwB,CAAC;IACpC,CAAC;IAED,YAAY,OAAO;QACf,KAAK,CAAC,OAAO,CAAC,CAAC;QAEf,IAAI,CAAC,EAAE,CAAC,WAAW,EAAE,GAAG,EAAE;YACtB,IAAI,CAAC,aAAa,GAAG,IAAI,QAAQ,CAAC,KAAK,CAAC,YAAY,CAAuB,IAAI,CAAC,WAAY,CAAC,EAAE,CAAC,CAAC;QACrG,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,UAAU;QACb,OAAY,IAAI,CAAC,aAAa,CAAC;IACnC,CAAC;CACJ;AAlBD,kEAkBC","sourcesContent":["import * as mongoose from 'mongoose';\nimport * as mongo from 'mongodb';\n\nimport { MongooseAdapter } from './mongoose-adapter';\n\n(<any>mongoose).Promise = global.Promise;\n\nexport class MongooseGridFsBucketAdapter extends MongooseAdapter {\n    private _gridfsBucket;\n\n    public static getInterfaceName(): string {\n        return 'mongoose-gridfs-bucket';\n    }\n\n    constructor(options) {\n        super(options);\n\n        this.on('connected', () => {\n            this._gridfsBucket = new mongoose.mongo.GridFSBucket((<mongoose.Connection>this._connection).db);\n        });\n    }\n\n    public getLibrary<T = mongo.GridFSBucket>(): T {\n        return <any>this._gridfsBucket;\n    }\n}\n"]}