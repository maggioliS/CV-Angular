{"version":3,"file":"hapiness-mongo-adapter.js","sourceRoot":"","sources":["../../../../src/module/adapters/hapiness-mongo-adapter.ts"],"names":[],"mappings":"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","sourcesContent":["import { ModelManager } from '../managers/model-manager';\nimport { EventEmitter } from 'events';\nimport { Observable } from 'rxjs/Observable';\nimport { HapinessMongoAdapterConstructorArgs } from './interfaces';\nimport { UtilFunctions, Debugger } from '../shared';\n\nconst __debugger = new Debugger('HapinessMongoAdapter');\n\n/*\n * Not really abstract but we'll simulate it\n */\nexport class HapinessMongoAdapter extends EventEmitter {\n    protected _config: HapinessMongoAdapterConstructorArgs;\n    protected _uri: string;\n    protected _isReady: boolean;\n\n    protected _connection: any;\n    protected _db: any;\n\n    protected _modelManager: ModelManager;\n\n    public static getInterfaceName(): string {\n        throw new Error('Your adapter should implements `getInterfaceName()`');\n    }\n\n    constructor(options: HapinessMongoAdapterConstructorArgs) {\n        super();\n\n        this._config = options;\n\n        // It means we're not on test environment but we dont get any config!\n        if (!this._config || !Object.keys(this._config).length) {\n            throw new Error('Missing mongodb configuration');\n        }\n\n        this._isReady = false;\n\n        if (options.skip_connect) {\n            return;\n        }\n\n        this._modelManager = new ModelManager();\n    }\n\n    public connect(): Observable<void> {\n        this._connection = null;\n        const db = this._config.db || this._config.database;\n\n        if (this._config.url) {\n            this._uri = UtilFunctions.getMongoUri(this._config.url, db);\n        } else if (!!db) {\n            this._uri = `mongodb://${this._config.host}:${this._config.port || 27017}/${db}`;\n        } else {\n            return Observable.throw(new Error('No db name nor url provided'));\n        }\n\n        return this.tryConnect()\n            .do(() => __debugger.debug('connect', 'OK'))\n            .catch(err => {\n                __debugger.debug('connect', `Err catched :: ${err.message}`);\n                __debugger.debug('connect', `Err catched :: ${JSON.stringify(err, null, 2)}`);\n                return Observable.throw(err);\n            });\n    }\n\n    public tryConnect(): Observable<void> {\n        __debugger.debug('tryConnect', `connecting to ${UtilFunctions.hideCredentials(this._uri)}`);\n        this.emit('connecting', { uri: this._uri });\n        return this\n            ._tryConnect()\n            .switchMap(_ => this._afterConnect());\n    }\n\n    /*\n     *\n     *  This function should be overriden by all inherited classes.\n     *\n     */\n    protected _tryConnect(): Observable<void> {\n        return Observable\n            .throw(new Error('`_tryConnect` is not implemented'));\n    }\n\n    /*\n     *\n     *  This function should be overriden by all inherited classes.\n     *\n     */\n    protected _afterConnect(): Observable<void> {\n        return Observable\n            .throw(new Error('`_afterConnect` is not implemented'));\n    }\n\n    /*\n     *\n     *  This function should be overriden by all inherited classes.\n     *\n     */\n    public getLibrary<T = any>(): T {\n        throw new Error('`getLibrary` is not implemented');\n    }\n\n    /*\n     *\n     *  This function should be overriden by all inherited classes.\n     *\n     */\n    public registerValue(schema: any, collection: string, collectionName?: string): any {\n        throw new Error('`registerValue` is not implemented');\n    }\n\n    public getModelManager(): ModelManager {\n        return this._modelManager;\n    }\n\n    protected onConnected(): Observable<void> {\n        __debugger.debug('onConnected', '');\n\n        return Observable\n            .create(observer => {\n                this._isReady = true;\n                this.emit('ready');\n\n                observer.next();\n                observer.complete();\n            });\n    }\n\n    protected onDisconnected(): Observable<void> {\n        __debugger.debug('onDisconnected', `disconnected from ${UtilFunctions.hideCredentials(this._uri)}`);\n\n        this.emit('disconnected', { uri: this._uri });\n\n        return this\n            .tryConnect()\n            .delay(5000);\n    }\n\n    protected onError(err?: any): Observable<void> {\n        __debugger.debug('onError', `got error :: ${JSON.stringify(err, null, 2)}`);\n\n        return this\n            .tryConnect()\n            .delay(5000);\n    }\n\n    public whenReady(options: { timeout: number } = { timeout: 60000 }): Observable<void> {\n        return Observable\n            .create(observer => {\n                if (this._isReady) {\n                    __debugger.debug('whenReady', 'already ready');\n\n                    observer.next();\n                    observer.complete();\n                    return;\n                }\n\n                this.once('ready', () => {\n                    __debugger.debug('whenReady', 'now ready');\n\n                    this._isReady = true;\n\n                    observer.next();\n                    observer.complete();\n                });\n            })\n            .timeout(options.timeout);\n    }\n\n    public isConnected(): boolean {\n        return this.isReady();\n    }\n\n    public isReady(): boolean {\n        return this._isReady;\n    }\n\n    public getUri(): string {\n        return this._uri;\n    }\n\n    public getConnection<T = any>(): T {\n        return this._connection;\n    }\n\n    public close(): Observable<void> {\n        return Observable.of(null);\n    }\n\n}\n"]}