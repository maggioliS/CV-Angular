{"version":3,"file":"mongo-manager.js","sourceRoot":"","sources":["../../../../src/module/managers/mongo-manager.ts"],"names":[],"mappings":";;AAAA,0CAMqB;AAErB,sCAAgD;AAChD,gDAA6C;AAE7C,MAAM,UAAU,GAAG,IAAI,iBAAQ,CAAC,cAAc,CAAC,CAAC;AAEhD;IAMI,YAAY,MAA4C;QACpD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QACvC,IAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC;QAC7B,IAAI,CAAC,SAAS,GAAG;YACb,CAAC,0BAAe,CAAC,gBAAgB,EAAE,CAAC,EAAE,0BAAe;YACrD,CAAC,gCAAqB,CAAC,gBAAgB,EAAE,CAAC,EAAE,gCAAqB;YACjE,CAAC,sCAA2B,CAAC,gBAAgB,EAAE,CAAC,EAAE,sCAA2B;SAChF,CAAC;IACN,CAAC;IAES,UAAU,CAAC,YAAkD;QACnE,UAAU,CAAC,KAAK,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;QACnC,OAA6C,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,YAAY,CAAC,CAAC;IACjF,CAAC;IAES,cAAc,CAAC,WAAmB,EAAE,OAA4C;QACtF,UAAU,CAAC,KAAK,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC;QACvC,IAAI,OAAO,CAAC,cAAc,EAAE;YACxB,OAAO,OAAO,CAAC,cAAc,CAAC;SACjC;QAED,MAAM,wBAAwB,GAAG,CAAC,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;QACvE,MAAM,YAAY,GAAG,CAAC,WAAW,CAAC,CAAC,MAAM,CACrC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE;YACnC,IAAI,wBAAwB,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;gBAC5C,OAAO,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;aACjC;YACD,OAAO,GAAG,CAAC;QACf,CAAC,EAAE,EAAE,CAAC,CACT,CAAC;QAEF,OAAO,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAClC,CAAC;IAEM,eAAe,CAAC,YAAyC;QAC5D,UAAU,CAAC,KAAK,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC;QACxC,MAAM,WAAW,GAAW,YAAY,CAAC,gBAAgB,EAAE,CAAC;QAE5D,UAAU,CAAC,KAAK,CAAC,iBAAiB,EAAE,UAAU,WAAW,EAAE,CAAC,CAAC;QAC7D,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE;YAC9B,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,GAAG,YAAY,CAAC;SAC9C;aAAM;YACH,MAAM,IAAI,KAAK,CAAC,YAAY,WAAW,kBAAkB,CAAC,CAAC;SAC9D;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,WAAW,CAAC,WAAmB,EAAE,OAAa;QACjD,UAAU,CAAC,KAAK,CAAC,aAAa,EAAE,qBAAqB,WAAW,EAAE,CAAC,CAAC;QACpE,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE;YAC9B,OAAO,uBAAU,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,mBAAmB,WAAW,uCAAuC,CAAC,CAAC,CAAC;SAC7G;QAED,MAAM,QAAQ,GACV,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAE7C,MAAM,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;QACvD,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,EAAE;YAC/B,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;SAC9E;QAED,OAAO,IAAI;aACN,kBAAkB,CAAC,GAAG,CAAC;aACvB,OAAO,EAAE;aACT,OAAO,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC;aACvD,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC,CAAC;IAChD,CAAC;IAEM,UAAU,CAAC,WAAmB,EAAE,OAAa;QAChD,UAAU,CAAC,KAAK,CAAC,YAAY,EAAE,qBAAqB,WAAW,EAAE,CAAC,CAAC;QAEnE,MAAM,QAAQ,GACV,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAE7C,+GAA+G;QAC/G,IAAI,GAAG,GAAG,EAAE,CAAC;QACb,MAAM,wBAAwB,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC;aACnE,MAAM,CACH,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CACuB,CAAC,CAAC,WAAY,CAAC,gBAAgB,EAAE,KAAK,WAAW,CACtF;aACA,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;QAErB,IAAI,wBAAwB,CAAC,MAAM,KAAK,CAAC,EAAE;YACvC,GAAG,GAAG,wBAAwB,CAAC,KAAK,EAAE,CAAC;SAC1C;aAAM;YACH,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;SACpD;QAED,OAAO,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;IACxC,CAAC;CACJ;AAlGD,oCAkGC","sourcesContent":["import {\n    HapinessMongoAdapter,\n    HapinessMongoAdapterConstructorArgs,\n    MongooseAdapter,\n    MongooseGridFsAdapter,\n    MongooseGridFsBucketAdapter\n} from '../adapters';\n\nimport { StringMap, Debugger } from '../shared';\nimport { Observable } from 'rxjs/Observable';\n\nconst __debugger = new Debugger('MongoManager');\n\nexport class MongoManager {\n\n    private _config: HapinessMongoAdapterConstructorArgs;\n    private _adapters: StringMap<typeof HapinessMongoAdapter>;\n    private _adaptersInstances: StringMap<HapinessMongoAdapter>;\n\n    constructor(config?: HapinessMongoAdapterConstructorArgs) {\n        this._config = this._fixConfig(config);\n        this._adaptersInstances = {};\n        this._adapters = {\n            [MongooseAdapter.getInterfaceName()]: MongooseAdapter,\n            [MongooseGridFsAdapter.getInterfaceName()]: MongooseGridFsAdapter,\n            [MongooseGridFsBucketAdapter.getInterfaceName()]: MongooseGridFsBucketAdapter\n        };\n    }\n\n    protected _fixConfig(configValues?: HapinessMongoAdapterConstructorArgs): HapinessMongoAdapterConstructorArgs {\n        __debugger.debug('_fixConfig', '');\n        return <HapinessMongoAdapterConstructorArgs> Object.assign({}, configValues);\n    }\n\n    protected _keyForAdapter(adapterName: string, options: HapinessMongoAdapterConstructorArgs): string {\n        __debugger.debug('_keyForAdapter', '');\n        if (options.connectionName) {\n            return options.connectionName;\n        }\n\n        const usedKeyForKeyComputation = ['db', 'database', 'url', 'instance'];\n        const _keyElements = [adapterName].concat(\n            Object.keys(options).reduce((acc, k) => {\n                if (usedKeyForKeyComputation.indexOf(k) !== -1) {\n                    return acc.concat(options[k]);\n                }\n                return acc;\n            }, [])\n        );\n\n        return _keyElements.join('_');\n    }\n\n    public registerAdapter(adapterClass: typeof HapinessMongoAdapter): boolean {\n        __debugger.debug('registerAdapter', '');\n        const adapterName: string = adapterClass.getInterfaceName();\n\n        __debugger.debug('registerAdapter', `---->  ${adapterName}`);\n        if (!this._adapters[adapterName]) {\n            this._adapters[adapterName] = adapterClass;\n        } else {\n            throw new Error(`Provider ${adapterName} already exists.`);\n        }\n\n        return true;\n    }\n\n    public loadAdapter(adapterName: string, options?: any): Observable<HapinessMongoAdapter> {\n        __debugger.debug('loadAdapter', `Adapter name ---> ${adapterName}`);\n        if (!this._adapters[adapterName]) {\n            return Observable.throw(new Error(`Unknown adapter ${adapterName}, please register it before using it.`));\n        }\n\n        const _options: HapinessMongoAdapterConstructorArgs = <HapinessMongoAdapterConstructorArgs>\n            Object.assign({}, this._config, options);\n\n        const key = this._keyForAdapter(adapterName, _options);\n        if (!this._adaptersInstances[key]) {\n            this._adaptersInstances[key] = new (this._adapters[adapterName])(_options);\n        }\n\n        return this\n            ._adaptersInstances[key]\n            .connect()\n            .flatMap(() => this._adaptersInstances[key].whenReady())\n            .map(_ => this._adaptersInstances[key]);\n    }\n\n    public getAdapter(adapterName: string, options?: any): HapinessMongoAdapter {\n        __debugger.debug('getAdapter', `Adapter name ---> ${adapterName}`);\n\n        const _options: HapinessMongoAdapterConstructorArgs = <HapinessMongoAdapterConstructorArgs>\n            Object.assign({}, this._config, options);\n\n        // If there is only one registered provider for the wanted adapter, dont compute the key but return it directly\n        let key = '';\n        const _keysForAdapterInstances = Object.entries(this._adaptersInstances)\n            .filter(\n                ([k, v]) =>\n                    (<typeof HapinessMongoAdapter>v.constructor).getInterfaceName() === adapterName\n            )\n            .map(([k]) => k);\n\n        if (_keysForAdapterInstances.length === 1) {\n            key = _keysForAdapterInstances.shift();\n        } else {\n            key = this._keyForAdapter(adapterName, _options);\n        }\n\n        return this._adaptersInstances[key];\n    }\n}\n"]}