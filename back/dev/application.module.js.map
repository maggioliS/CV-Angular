{"version":3,"file":"application.module.js","sourceRoot":"","sources":["../src/application.module.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,6CAA0C;AAC1C,yCAAqF;AACrF,6CAA+D;AAC/D,2CAAkE;AAClE,yCAA4C;AAE5C,yCAA4D;AAC5D,0CAA+D;AAC/D,0CAAkD;AAClD,gDAAqD;AACrD,4CAAoD;AAEpD,qFAAqF;AACrF,2FAA2F;AAC3F,MAAM,yBAAyB,GAAG,CAAC,kBAAsC,EAAE,EAAE,CAAC,IAAI,6BAAkB,CAAC,kBAAkB,CAAC,CAAC;AAsBzH,IAAa,iBAAiB,GAA9B,MAAa,iBAAiB;IAC1B;;;;;OAKG;IACH,YAAoB,WAA8B,EAAU,OAAsB;QAA9D,gBAAW,GAAX,WAAW,CAAmB;QAAU,YAAO,GAAP,OAAO,CAAe;IAClF,CAAC;IAED;;;;OAIG;IACH,OAAO;QACH,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,gDAAgD,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;IAC9G,CAAC;IAED;;;;;;;OAOG;IACH,OAAO,CAAC,KAAY,EAAE,IAAU;QAC5B,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,oDAAoD,CAAC,CAAC;IAC7E,CAAC;CACJ,CAAA;AA9BY,iBAAiB;IApB7B,qBAAc,CAAC;QACZ,OAAO,EAAE,OAAO;QAChB,OAAO,EAAE;YACL,qBAAY;YACZ,iBAAU,CAAC,SAAS,CAAC,eAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YACxC,mBAAW;SACd;QACD,YAAY,EAAE;YACV,mBAAa;YACb,oBAAc;YACd,sBAAgB;YAChB,yBAAgB;YAChB,wBAAiB;SACpB;QACD,SAAS,EAAE;YACP,wBAAiB;YACjB,qBAAU;YACV,EAAE,OAAO,EAAE,6BAAkB,EAAE,UAAU,EAAE,yBAAyB,EAAE,IAAI,EAAE,CAAE,0BAAkB,CAAE,EAAE;SACvG;KACJ,CAAC;qCAQmC,wBAAiB,EAAmB,sBAAa;GAPzE,iBAAiB,CA8B7B;AA9BY,8CAAiB","sourcesContent":["import { Config } from '@hapiness/config';\nimport { HapinessModule, HttpServerService, OnError, OnStart } from '@hapiness/core';\nimport { LoggerModule, LoggerService } from '@hapiness/logger';\nimport { MongoClientService, MongoModule } from '@hapiness/mongo';\nimport { SwagModule } from '@hapiness/swag';\nimport { Observable } from 'rxjs';\nimport { CvsService, CvsDocumentService } from './services';\nimport {GetAllCvsRoute, GetOneCvRoute} from './routes/cvs/get';\nimport {PutUpdateCvRoute} from './routes/cvs/put';\nimport {DeleteOneCvRoute} from './routes/cvs/delete';\nimport {PostCreateCvRoute} from './routes/cvs/post';\n\n// factory to declare dependency between PeopleDocumentService and MongoClientService\n// we use it to be sure that MongoClientService will be loaded before PeopleDocumentService\nconst cvsDocumentServiceFactory = (mongoClientService: MongoClientService) => new CvsDocumentService(mongoClientService);\n\n@HapinessModule({\n    version: '1.0.0',\n    imports: [\n        LoggerModule,\n        SwagModule.setConfig(Config.get('swag')),\n        MongoModule\n    ],\n    declarations: [\n        GetOneCvRoute,\n        GetAllCvsRoute,\n        PutUpdateCvRoute,\n        DeleteOneCvRoute,\n        PostCreateCvRoute\n    ],\n    providers: [\n        HttpServerService,\n        CvsService,\n        { provide: CvsDocumentService, useFactory: cvsDocumentServiceFactory, deps: [ MongoClientService ] }\n    ]\n})\nexport class ApplicationModule implements OnStart, OnError {\n    /**\n     * Class constructor\n     *\n     * @param _httpServer\n     * @param {LoggerService} _logger\n     */\n    constructor(private _httpServer: HttpServerService, private _logger: LoggerService) {\n    }\n\n    /**\n     * On start process\n     *\n     * @return {void | Observable<any>}\n     */\n    onStart(): void | Observable<any> {\n        this._logger.info(`< Application.bootstrap > Server started at: ${this._httpServer.instance().info.uri}`);\n    }\n\n    /**\n     * On error process\n     *\n     * @param {Error} error\n     * @param data\n     *\n     * @return {void | Observable<any>}\n     */\n    onError(error: Error, data?: any): void | Observable<any> {\n        this._logger.error('A problem occurred during application\\'s lifecycle');\n    }\n}\n"]}