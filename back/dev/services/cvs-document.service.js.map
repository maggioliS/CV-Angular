{"version":3,"file":"cvs-document.service.js","sourceRoot":"","sources":["../../src/services/cvs-document.service.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,yCAA4C;AAC5C,2CAAqD;AAErD,+BAAwC;AACxC,8CAAqC;AAErC,uCAAwC;AAGxC,IAAa,kBAAkB,GAA/B,MAAa,kBAAkB;IAI3B;;;;OAIG;IACH,YAAoB,mBAAuC;QAAvC,wBAAmB,GAAnB,mBAAmB,CAAoB;QACvD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,EAAE,OAAO,EAAE,UAAU,EAAE,EAAE,aAAO,CAAC,CAAC;IACzF,CAAC;IAED;;;;OAIG;IACH,IAAI;QACA,OAAO,WAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;aAC/B,IAAI,CACD,eAAG,CAAC,CAAC,IAAwB,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CACzG,CAAC;IACV,CAAC;IAED;;;;;;OAMG;IACH,WAAW,CAAC,KAAa;QACrB,OAAO,WAAI,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;aACtC,IAAI,CACD,eAAG,CAAC,CAAC,GAAqB,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CACnE,CAAC;IACV,CAAC;IAED;;;;;;OAMG;IACH,MAAM,CAAC,EAAM;QACT,OAAO,WAAI,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;aACjC,IAAI,CACD,eAAG,CAAC,CAAC,GAAqB,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAC/C,CAAC;IACV,CAAC;IAED;;;;;;;OAOG;IACH,oBAAoB,CAAC,KAAa,EAAE,EAAM;QACtC,OAAO,WAAI,CAAC,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,KAAK,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;aAClE,IAAI,CACD,eAAG,CAAC,CAAC,GAAqB,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CACnE,CAAC;IACV,CAAC;IAED;;;;;;OAMG;IACH,oBAAoB,CAAC,KAAa;QAC9B,OAAO,WAAI,CAAC,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;aAC/C,IAAI,CACD,eAAG,CAAC,CAAC,GAAqB,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CACnE,CAAA;IACT,CAAC;CACJ,CAAA;AAjFY,kBAAkB;IAD9B,iBAAU,EAAE;qCAUgC,0BAAkB;GATlD,kBAAkB,CAiF9B;AAjFY,gDAAkB","sourcesContent":["import { Injectable } from '@hapiness/core';\nimport { MongoClientService } from '@hapiness/mongo';\nimport { MongooseDocument } from 'mongoose';\nimport { from, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Cv } from '../interfaces';\nimport { CvModel } from '../models/cvs';\n\n@Injectable()\nexport class CvsDocumentService {\n    // private property to store document instance\n    private _document: any;\n\n    /**\n     * Class constructor\n     *\n     * @param {MongoClientService} _mongoClientService\n     */\n    constructor(private _mongoClientService: MongoClientService) {\n        this._document = this._mongoClientService.getModel({ adapter: 'mongoose' }, CvModel);\n    }\n\n    /**\n     * Call mongoose method, call toJSON on each result and returns Person[] or undefined\n     *\n     * @return {Observable<Person[] | void>}\n     */\n    find(): Observable<Cv[] | void> {\n        return from(this._document.find({}))\n            .pipe(\n                map((docs: MongooseDocument[]) => (!!docs && docs.length > 0) ? docs.map(_ => _.toJSON()) : undefined)\n            );\n    }\n\n    /**\n     * Returns one person of the list matching id in parameter\n     *\n     * @param {string} id of the person in the db\n     *\n     * @return {Observable<Person | void>}\n     */\n    findByTitre(titre: string): Observable<Cv | void> {\n        return from(this._document.findById(titre))\n            .pipe(\n                map((doc: MongooseDocument) => !!doc ? doc.toJSON() : undefined)\n            );\n    }\n\n    /**\n     * Check if person already exists with index and add it in people list\n     *\n     * @param {Person} person to create\n     *\n     * @return {Observable<Person>}\n     */\n    create(cv: Cv): Observable<Cv> {\n        return from(this._document.create(cv))\n            .pipe(\n                map((doc: MongooseDocument) => doc.toJSON())\n            );\n    }\n\n    /**\n     * Update a person in people list\n     *\n     * @param {string} id\n     * @param {Person} person\n     *\n     * @return {Observable<Person | void>}\n     */\n    findByTitreAndUpdate(titre: string, cv: Cv): Observable<Cv | void> {\n        return from(this._document.findByIdAndUpdate(titre, cv, { new: true }))\n            .pipe(\n                map((doc: MongooseDocument) => !!doc ? doc.toJSON() : undefined)\n            );\n    }\n\n    /**\n     * Delete a person in people list\n     *\n     * @param {string} id\n     *\n     * @return {Observable<Person | void>}\n     */\n    findByTitreAndRemove(titre: string): Observable<Cv | void> {\n        return from(this._document.findByIdAndRemove(titre))\n            .pipe(\n                map((doc: MongooseDocument) => !!doc ? doc.toJSON() : undefined)\n            )\n    }\n}\n"]}