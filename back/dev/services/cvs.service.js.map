{"version":3,"file":"cvs.service.js","sourceRoot":"","sources":["../../src/services/cvs.service.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,yCAAsC;AACtC,yCAAiE;AAEjE,+BAAkD;AAClD,8CAA0D;AAE1D,iEAA4D;AAG5D,IAAa,UAAU,GAAvB,MAAa,UAAU;IACnB;;OAEG;IACH,YAAoB,mBAAuC;QAAvC,wBAAmB,GAAnB,mBAAmB,CAAoB;IAC3D,CAAC;IAED;;;;OAIG;IACH,OAAO;QACH,OAAO,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,CAAC;IAC3C,CAAC;IAED;;;;OAIG;IACH,MAAM;QACF,OAAO,IAAI,CAAC,OAAO,EAAE;aAChB,IAAI,CACD,eAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,MAAM,CAAC,CAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAC1F,CAAC;IACV,CAAC;IAED;;;;;;OAMG;IACH,GAAG,CAAC,KAAa;QACb,OAAO,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC,KAAK,CAAC;aAC7C,IAAI,CACD,sBAAU,CAAC,CAAC,CAAC,EAAE,CAAC,iBAAU,CAAC,WAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAC/D,mBAAO,CAAC,CAAC,CAAC,EAAE,CACR,CAAC,CAAC,CAAC,CAAC,CAAC;YACD,SAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YACP,iBAAU,CAAC,WAAI,CAAC,QAAQ,CAAC,eAAe,KAAK,YAAY,CAAC,CAAC,CAClE,CACJ,CAAC;IACV,CAAC;IAED;;;;;;OAMG;IACH,MAAM,CAAC,EAAM;QACT,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;aACjB,IAAI,CACD,mBAAO,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAChD,sBAAU,CAAC,CAAC,CAAC,EAAE,CACX,CAAC,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC;YACZ,iBAAU,CACN,WAAI,CAAC,QAAQ,CAAC,iBAAiB,EAAE,CAAC,KAAK,iBAAiB,CAAC,CAC5D,CAAC,CAAC;YACH,iBAAU,CAAC,WAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CACrD,EACD,eAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,UAAU,EAAE,GAAG,EAAE,CAAC,CAAC,CAC/C,CAAC;IACV,CAAC;IAED;;;;;;;OAOG;IACH,MAAM,CAAC,KAAa,EAAE,EAAM;QACxB,OAAO,IAAI,CAAC,mBAAmB,CAAC,oBAAoB,CAAC,KAAK,EAAE,EAAE,CAAC;aAC1D,IAAI,CACD,sBAAU,CAAC,CAAC,CAAC,EAAE,CACX,CAAC,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC;YACZ,iBAAU,CACN,WAAI,CAAC,QAAQ,CAAC,iBAAiB,EAAE,CAAC,KAAK,kBAAkB,CAAC,CAC7D,CAAC,CAAC;YACH,iBAAU,CAAC,WAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CACrD,EACD,mBAAO,CAAC,CAAC,CAAC,EAAE,CACR,CAAC,CAAC,CAAC,CAAC,CAAC;YACD,SAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YACP,iBAAU,CAAC,WAAI,CAAC,QAAQ,CAAC,kBAAkB,KAAK,aAAa,CAAC,CAAC,CACtE,CACJ,CAAC;IACV,CAAC;IAED;;;;;;OAMG;IACH,MAAM,CAAC,KAAa;QAChB,OAAO,IAAI,CAAC,mBAAmB,CAAC,oBAAoB,CAAC,KAAK,CAAC;aACtD,IAAI,CACD,sBAAU,CAAC,CAAC,CAAC,EAAE,CAAC,iBAAU,CAAC,WAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAC/D,mBAAO,CAAC,CAAC,CAAC,EAAE,CACR,CAAC,CAAC,CAAC,CAAC,CAAC;YACD,SAAE,CAAC,SAAS,CAAC,CAAC,CAAC;YACf,iBAAU,CAAC,WAAI,CAAC,QAAQ,CAAC,kBAAkB,KAAK,aAAa,CAAC,CAAC,CACtE,CACJ,CAAC;IACV,CAAC;IAED;;;;;;;;OAQG;IACK,MAAM,CAAC,EAAM;QACjB,OAAO,SAAE,CAAC,EAAE,CAAC;aACR,IAAI,CACD,eAAG,CAAC,CAAC,CAAC,EAAE,CACJ,MAAM,CAAC,MAAM,CACT,CAAC,CACJ,CACJ,CACJ,CAAC;IACV,CAAC;CACJ,CAAA;AArIY,UAAU;IADtB,iBAAU,EAAE;qCAKgC,yCAAkB;GAJlD,UAAU,CAqItB;AArIY,gCAAU","sourcesContent":["import { Biim } from '@hapiness/biim';\nimport { HTTPHandlerResponse, Injectable } from '@hapiness/core';\n\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, flatMap, map } from 'rxjs/operators';\nimport { Cv } from '../interfaces';\nimport { CvsDocumentService } from './cvs-document.service';\n\n@Injectable()\nexport class CvsService {\n    /**\n     * Class constructor\n     */\n    constructor(private _cvsDocumentService: CvsDocumentService) {\n    }\n\n    /**\n     * Returns all existing people in the list\n     *\n     * @returns {Observable<Person[] | void>}\n     */\n    listAll(): Observable<Cv[] | void> {\n        return this._cvsDocumentService.find();\n    }\n\n    /**\n     * Returns randomly one people of the list\n     *\n     * @returns {Observable<Person | void>}\n     */\n    random(): Observable<Cv | void> {\n        return this.listAll()\n            .pipe(\n                map(_ => (!!_ && _.length > 0) ? _[ Math.round(Math.random() * _.length) ] : undefined)\n            );\n    }\n\n    /**\n     * Returns one people of the list matching id in parameter\n     *\n     * @param {string} id of the people\n     *\n     * @returns {Observable<Person>}\n     */\n    one(titre: string): Observable<Cv> {\n        return this._cvsDocumentService.findByTitre(titre)\n            .pipe(\n                catchError(e => throwError(Biim.preconditionFailed(e.message))),\n                flatMap(_ =>\n                    !!_ ?\n                        of(_) :\n                        throwError(Biim.notFound(`CV with id '${titre} not found`))\n                )\n            );\n    }\n\n    /**\n     * Check if person already exists and add it in people list\n     *\n     * @param person to create\n     *\n     * @returns {Observable<HTTPHandlerResponse>}\n     */\n    create(cv: Cv): Observable<HTTPHandlerResponse> {\n        return this._addCv(cv)\n            .pipe(\n                flatMap(_ => this._cvsDocumentService.create(_)),\n                catchError(e =>\n                    e.code = 11000 ?\n                        throwError(\n                            Biim.conflict(`CV with titre'${cv.titre} already exists`)\n                        ) :\n                        throwError(Biim.preconditionFailed(e.message))\n                ),\n                map(_ => ({ response: _, statusCode: 201 }))\n            );\n    }\n\n    /**\n     * Update a person in people list\n     *\n     * @param {string} id of the person to update\n     * @param {Person} person data to update\n     *\n     * @returns {Observable<Person>}\n     */\n    update(titre: string, cv: Cv): Observable<Cv> {\n        return this._cvsDocumentService.findByTitreAndUpdate(titre, cv)\n            .pipe(\n                catchError(e =>\n                    e.code = 11000 ?\n                        throwError(\n                            Biim.conflict(`cv with title'${cv.titre}' already exists`)\n                        ) :\n                        throwError(Biim.preconditionFailed(e.message))\n                ),\n                flatMap(_ =>\n                    !!_ ?\n                        of(_) :\n                        throwError(Biim.notFound(`cv with title '${titre}' not found`))\n                )\n            );\n    }\n\n    /**\n     * Deletes one person in people list\n     *\n     * @param {string} id of the person to delete\n     *\n     * @returns {Observable<void>}\n     */\n    delete(titre: string): Observable<void> {\n        return this._cvsDocumentService.findByTitreAndRemove(titre)\n            .pipe(\n                catchError(e => throwError(Biim.preconditionFailed(e.message))),\n                flatMap(_ =>\n                    !!_ ?\n                        of(undefined) :\n                        throwError(Biim.notFound(`Cv with title '${titre}' not found`))\n                )\n            );\n    }\n\n    /**\n     * Add person with good data in people list\n     *\n     * @param person to add\n     *\n     * @returns {Observable<any>}\n     *\n     * @private\n     */\n    private _addCv(cv: Cv): Observable<any> {\n        return of(cv)\n            .pipe(\n                map(_ =>\n                    Object.assign(\n                        _\n                    )\n                )\n            );\n    }\n}\n"]}